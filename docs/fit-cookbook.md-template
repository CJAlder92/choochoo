
# FIT Cookbook

* [Installing Choocoo](#installing-choochoo)
* [Check a FIT File](#check-a-fit-file)
* [Check Timestamps in a FIT File](#check-timestamps-in-a-fit-file)
* [Remove a Bad Timestamp from a FIT File](#remove-a-bad-timestamp-from-a-fit-file)
* [See What Data are Dropped](#see-what-data-are-dropped)
* [See What Data are Dropped in Detail](#see-what-data-are-dropped-in-detail)
* [Remove Arbitrary Data from a FIT File](#remove-arbitrary-data-from-a-fit-file)
* [Search for Values in a FIT File](#search-for-values-in-a-fit-file)
* [Search for Values in a FIT File with Context](#search-for-values-in-a-fit-file-with-context)
* [Find FIT Files with Values](#find-fit-files-with-values)
* [Read a FIT File in Python](#read-a-fit-file-in-python)

## Installing Choocoo

Instructions for install are [here](getting-started).

If you only want to use the python library programatically there is no
need to configure the system.

If you only want to use the `ch2 fit` and `ch2 fix-fit` commands, the
default configuration (`ch2 default-config`) is sufficient.

## Check a FIT File

To check for errors in `myfile.fit`:

#/bin/bash
out=`mktemp /tmp/ch2-doc.XXXXXX`
echo "    > ch2 fix-fit myfile.fit --discard"
dev/ch2 fix-fit data/test/source/personal/2018-07-26-rec.fit --discard > $out 2>&1
sed -i 's|data/test/source/personal/2018-07-26-rec|myfile|g' $out
sed -i 's|/home/andrew/.ch2/database.*|...|g' $out
sed 's/^/    /' $out

If there are no warnings or errors (as above) then the file is OK (as
far as my code can tell - to check timestamps see the next recipe).

## Check Timestamps in a FIT File

To check that the timestamp never increases by more than 60s between
records:

#/bin/bash
out=`mktemp /tmp/ch2-doc.XXXXXX`
echo "    > ch2 fix-fit myfile.fit --max-delta-t 60 --discard"
dev/ch2 fix-fit data/test/source/personal/2018-07-26-rec.fit --max-delta-t 60 --discard > $out 2>&1
sed -i 's|data/test/source/personal/2018-07-26-rec|myfile|g' $out
sed -i 's|/home/andrew/.ch2/database.*|...|g' $out
sed 's/^/    /' $out

Here we can see that there was an jump of 273 seconds.

## Remove a Bad Timestamp from a FIT File

The `fix-fit` command can "drop" data that cause errors.  In this case
(compare timestamps in the two recipes above) it is the final
timestamp that apperas to be wrong.  So we can drop that without
worrying about further, incorrect timestamps.

Note that dropping a record may remove important information from the
file (see below to understand what information is removed).

The command to drop data is (see notes below):

#/bin/bash
out=`mktemp /tmp/ch2-doc.XXXXXX`
echo "    > ch2 fix-fit myfile.fit --max-delta-t 60 --drop --max-fwd-len 500 -o fixed.fit"
dev/ch2 fix-fit data/test/source/personal/2018-07-26-rec.fit --max-delta-t 60 --drop --max-fwd-len 500 -o /tmp/fixed.fit > $out 2>&1
sed -i 's|data/test/source/personal/2018-07-26-rec|myfile|g' $out
sed -i 's|/home/andrew/.ch2/database.*|...|g' $out
sed -i 's|/tmp/fixed.fit|fixed.fit|g' $out
sed 's/^/    /' $out

Note that:

  * We specified a maximum amount to drop of 500 bytes (`--max-fwd-len
    500`).  The default is 200, but was insufficient in this case.
    Using a larger value makes the program run slower, so don't do
    this unless necessary.

  * We specified an output file (`-o fixed.fit`).

  * Reading the output above, we can see that the first 4975 bytes of
    data were used.  We will use this in the next recipe.

## See What Data are Dropped

In the recipe above data were dropped after the first 4975 bytes.  We
can see what records that affected as follows:

#/bin/bash
out=`mktemp /tmp/ch2-doc.XXXXXX`
echo "    > ch2 fit myfile.fit --records --after-bytes 4975"
dev/ch2 fit data/test/source/personal/2018-07-26-rec.fit --records --after-bytes 4975 > $out 2>&1
sed -i 's|data/test/source/personal/2018-07-26-rec|myfile|g' $out
sed -i 's|/home/andrew/.ch2/database.*|...|g' $out
sed 's/^/    /' $out

That looks like metadata associated with ending an activity.  Probably
the "stop" button wasn't pressed until some minutes after the activity
ended.  Personally, I see no need to drop this data - it seems like
the jump in timestamps we saw has a reasonable explanation.

## See What Data are Dropped in Detail

Maybe we are a bit more curious about the data above.  What else can
we see?

Notice how the record numbers are `207`, `209`, and `211`.  Since
those are not consecutive there must be some internal messages also
present.  We can display those too:

#/bin/bash
out=`mktemp /tmp/ch2-doc.XXXXXX`
echo "    > ch2 fit myfile.fit --records --after-bytes 4975 --internal"
dev/ch2 fit data/test/source/personal/2018-07-26-rec.fit --records --after-bytes 4975 --internal > $out 2>&1
sed -i 's|data/test/source/personal/2018-07-26-rec|myfile|g' $out
sed -i 's|/home/andrew/.ch2/database.*|...|g' $out
sed 's/^/    /' $out

Hmm.  Some the message defintions and the checksum.  Nothing very
exciting.

We can also see the same data in binary form.  For example:

#/bin/bash
out=`mktemp /tmp/ch2-doc.XXXXXX`
echo "    > ch2 fit myfile.fit --tokens --after-bytes 4975 --internal"
dev/ch2 fit data/test/source/personal/2018-07-26-rec.fit --tokens --after-bytes 4975 --internal > $out 2>&1
sed -i 's|data/test/source/personal/2018-07-26-rec|myfile|g' $out
sed -i 's|/home/andrew/.ch2/database.*|...|g' $out
sed 's/^/    /' $out

## Remove Arbitrary Data from a FIT File

In the recipe above, perhaps we want to remove the `session` message
and its associated defintion.  This doesn't seem that smart an idea to
me, but it works as an example.

First, we note from the `tokens` dump that the data extend from offset
`5069` to `5316` (the end value is one before the next token at
`5317`).  We can remove that by taking the slices `:5069,5317:` as
follows:

#/bin/bash
out=`mktemp /tmp/ch2-doc.XXXXXX`
echo "    > ch2 fix-fit myfile.fit --slices :05069,05317: -o sliced.fit"
dev/ch2 fix-fit data/test/source/personal/2018-07-26-rec.fit --slices :05069,05317: -o /tmp/sliced.fit > $out 2>&1
sed -i 's|data/test/source/personal/2018-07-26-rec|myfile|g' $out
sed -i 's|/home/andrew/.ch2/database.*|...|g' $out
sed -i 's|/tmp/sliced.fit|sliced.fit|g' $out
sed 's/^/    /' $out

Note that `fix-fit` won't let you remove data that would corrupt the
file (to the best of its ability).

## Search for Values in a FIT File

For some reason we want to know if a file contains any speed values
over 7 m/s:

#/bin/bash
out=`mktemp /tmp/ch2-doc.XXXXXX`
echo "    > ch2 fit --grep '.*speed>7' -- myfile.fit"
dev/ch2 fit --grep '.*speed>7' -- data/test/source/personal/2018-07-26-rec.fit > $out 2>&1
sed -i 's|data/test/source/personal/2018-07-26-rec|myfile|g' $out
sed -i 's|/home/andrew/.ch2/database.*|...|g' $out
sed 's/^/    /' $out

Note that the `--` is needed to separate patterns from filenames.

## Search for Values in a FIT File with Context

Seeing the results above we'd like to know more about the records
where we were over 7.5m/s:

#/bin/bash
out=`mktemp /tmp/ch2-doc.XXXXXX`
echo "    > ch2 fit --grep 'record:enhanced_speed>7' --context myfile.fit"
dev/ch2 fit --grep 'record:enhanced_speed>7.5' --context data/test/source/personal/2018-07-26-rec.fit > $out 2>&1
sed -i 's|data/test/source/personal/2018-07-26-rec|myfile|g' $out
sed -i 's|/home/andrew/.ch2/database.*|...|g' $out
sed 's/^/    /' $out

The search expression has the form `record:field=value` where `record`
and `field` are regular expressions.  If the `:` is omitted then the
record name is ignored.  The comparison can be `=`, `>`, `<` or `~` -
the last of these is for regular expression matching on the value.

## Find FIT Files with Values

This has made us curious.  Do we have any rides where we exceed 17m/s?

#/bin/bash
out=`mktemp /tmp/ch2-doc.XXXXXX`
echo "    > ch2 fit --grep 'record:enhanced_speed>17' --match 0 --name *.fit"
dev/ch2 fit --grep 'record:enhanced_speed>17' --match 0 --name ~/archive/fit/bike/2017-0*.fit > $out 2>&1
sed -i 's|/home/andrew/.ch2/database.*|...|g' $out
sed -i 's|/home/andrew/archive/fit/bike/||g' $out
sed 's/^/    /' $out

The `--name` flag displays filenames on matching, while `--match 0`
means that no matching data are displayed.

## Read a FIT File in Python

So maybe now we want to know what the maximum speed is in a file?  We
need to write some code to do that...

#/bin/bash
out=`mktemp /tmp/ch2-doc.XXXXXX`
src=`mktemp /tmp/ch2-doc.XXXXXX`
rst=`mktemp /tmp/ch2-doc.XXXXXX`
cat <<EOF > $src
from logging import basicConfig, getLogger, INFO
from ch2.fit.profile.profile import read_fit, read_profile
from ch2.fit.format.records import no_bad_values
from ch2.fit.format.read import parse_data
#
basicConfig(level=INFO)
log = getLogger()
#
data = read_fit(log, '/home/andrew/project/ch2/choochoo/data/test/source/personal/2018-07-26-rec.fit')
types, messages = read_profile(log)
state, tokens = parse_data(log, data, types, messages)
#
SPEED = 'enhanced_speed'
max_speed = None
#
for offset, token in tokens:
    record = token.parse_token()
    data = record.as_dict(no_bad_values).data
    if SPEED in data:
        values, units = data[SPEED]
        for value in values:
            if max_speed is None or value > max_speed:
                max_speed = value
#
print('Maximum speed: %.2f' % max_speed)
EOF
sed -i 's/#//' $src
source env/bin/activate
PYTHONPATH=. python $src > $rst
sed -i 's|/home/andrew/project/ch2/choochoo/data/test/source/personal/2018-07-26-rec.fit|myfile.fit|' $src
sed 's/^/    /' $src > $out
echo >> $out
echo Giving the output >> $out
echo >> $out
sed 's/^/    /' $rst >> $out
cat $out

